/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./DomCrawler.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./DomCrawler.js":
/*!***********************!*\
  !*** ./DomCrawler.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("throw new Error(\"Module build failed: TypeError: Path must be a string. Received { __esModule: true,\\n  File: [Getter],\\n  options: [Getter],\\n  buildExternalHelpers: [Getter],\\n  template: [Getter],\\n  resolvePlugin: [Getter],\\n  resolvePreset: [Getter],\\n  version: [Getter],\\n  util: \\n   { __esModule: true,\\n     inherits: [Getter],\\n     inspect: [Getter],\\n     canCompile: { [Function: canCompile] EXTENSIONS: [Array] },\\n     list: [Function: list],\\n     regexify: [Function: regexify],\\n     arrayify: [Function: arrayify],\\n     booleanify: [Function: booleanify],\\n     shouldIgnore: [Function: shouldIgnore] },\\n  messages: \\n   { __esModule: true,\\n     MESSAGES: \\n      { tailCallReassignmentDeopt: 'Function reference has been reassigned, so it will probably be dereferenced, therefore we can\\\\'t optimise this with confidence',\\n        classesIllegalBareSuper: 'Illegal use of bare super',\\n        classesIllegalSuperCall: 'Direct super call is illegal in non-constructor, use super.$1() instead',\\n        scopeDuplicateDeclaration: 'Duplicate declaration $1',\\n        settersNoRest: 'Setters aren\\\\'t allowed to have a rest',\\n        noAssignmentsInForHead: 'No assignments allowed in for-in/of head',\\n        expectedMemberExpressionOrIdentifier: 'Expected type MemberExpression or Identifier',\\n        invalidParentForThisNode: 'We don\\\\'t know how to handle this node within the current parent - please open an issue',\\n        readOnly: '$1 is read-only',\\n        unknownForHead: 'Unknown node type $1 in ForStatement',\\n        didYouMean: 'Did you mean $1?',\\n        codeGeneratorDeopt: 'Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.',\\n        missingTemplatesDirectory: 'no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues',\\n        unsupportedOutputType: 'Unsupported output type $1',\\n        illegalMethodName: 'Illegal method name $1',\\n        lostTrackNodePath: 'We lost track of this node\\\\'s position, likely because the AST was directly manipulated',\\n        modulesIllegalExportName: 'Illegal export $1',\\n        modulesDuplicateDeclarations: 'Duplicate module declarations with the same source but in different scopes',\\n        undeclaredVariable: 'Reference to undeclared variable $1',\\n        undeclaredVariableType: 'Referencing a type alias outside of a type annotation',\\n        undeclaredVariableSuggestion: 'Reference to undeclared variable $1 - did you mean $2?',\\n        traverseNeedsParent: 'You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.',\\n        traverseVerifyRootFunction: 'You passed `traverse()` a function when it expected a visitor object, are you sure you didn\\\\'t mean `{ enter: Function }`?',\\n        traverseVerifyVisitorProperty: 'You passed `traverse()` a visitor object with the property $1 that has the invalid property $2',\\n        traverseVerifyNodeType: 'You gave us a visitor for the node type $1 but it\\\\'s not a valid type',\\n        pluginNotObject: 'Plugin $2 specified in $1 was expected to return an object when invoked but returned $3',\\n        pluginNotFunction: 'Plugin $2 specified in $1 was expected to return a function but returned $3',\\n        pluginUnknown: 'Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4',\\n        pluginInvalidProperty: 'Plugin $2 specified in $1 provided an invalid property of $3' },\\n     get: [Function: get],\\n     parseArgs: [Function: parseArgs] },\\n  types: \\n   { __esModule: true,\\n     STATEMENT_OR_BLOCK_KEYS: [Getter],\\n     FLATTENABLE_KEYS: [Getter],\\n     FOR_INIT_KEYS: [Getter],\\n     COMMENT_KEYS: [Getter],\\n     LOGICAL_OPERATORS: [Getter],\\n     UPDATE_OPERATORS: [Getter],\\n     BOOLEAN_NUMBER_BINARY_OPERATORS: [Getter],\\n     EQUALITY_BINARY_OPERATORS: [Getter],\\n     COMPARISON_BINARY_OPERATORS: [Getter],\\n     BOOLEAN_BINARY_OPERATORS: [Getter],\\n     NUMBER_BINARY_OPERATORS: [Getter],\\n     BINARY_OPERATORS: [Getter],\\n     BOOLEAN_UNARY_OPERATORS: [Getter],\\n     NUMBER_UNARY_OPERATORS: [Getter],\\n     STRING_UNARY_OPERATORS: [Getter],\\n     UNARY_OPERATORS: [Getter],\\n     INHERIT_KEYS: [Getter],\\n     BLOCK_SCOPED_SYMBOL: [Getter],\\n     NOT_LOCAL_BINDING: [Getter],\\n     VISITOR_KEYS: \\n      { ArrayExpression: [Array],\\n        AssignmentExpression: [Array],\\n        BinaryExpression: [Array],\\n        Directive: [Array],\\n        DirectiveLiteral: [],\\n        BlockStatement: [Array],\\n        BreakStatement: [Array],\\n        CallExpression: [Array],\\n        CatchClause: [Array],\\n        ConditionalExpression: [Array],\\n        ContinueStatement: [Array],\\n        DebuggerStatement: [],\\n        DoWhileStatement: [Array],\\n        EmptyStatement: [],\\n        ExpressionStatement: [Array],\\n        File: [Array],\\n        ForInStatement: [Array],\\n        ForStatement: [Array],\\n        FunctionDeclaration: [Array],\\n        FunctionExpression: [Array],\\n        Identifier: [Array],\\n        IfStatement: [Array],\\n        LabeledStatement: [Array],\\n        StringLiteral: [],\\n        NumericLiteral: [],\\n        NullLiteral: [],\\n        BooleanLiteral: [],\\n        RegExpLiteral: [],\\n        LogicalExpression: [Array],\\n        MemberExpression: [Array],\\n        NewExpression: [Array],\\n        Program: [Array],\\n        ObjectExpression: [Array],\\n        ObjectMethod: [Array],\\n        ObjectProperty: [Array],\\n        RestElement: [Array],\\n        ReturnStatement: [Array],\\n        SequenceExpression: [Array],\\n        SwitchCase: [Array],\\n        SwitchStatement: [Array],\\n        ThisExpression: [],\\n        ThrowStatement: [Array],\\n        TryStatement: [Array],\\n        UnaryExpression: [Array],\\n        UpdateExpression: [Array],\\n        VariableDeclaration: [Array],\\n        VariableDeclarator: [Array],\\n        WhileStatement: [Array],\\n        WithStatement: [Array],\\n        AssignmentPattern: [Array],\\n        ArrayPattern: [Array],\\n        ArrowFunctionExpression: [Array],\\n        ClassBody: [Array],\\n        ClassDeclaration: [Array],\\n        ClassExpression: [Array],\\n        ExportAllDeclaration: [Array],\\n        ExportDefaultDeclaration: [Array],\\n        ExportNamedDeclaration: [Array],\\n        ExportSpecifier: [Array],\\n        ForOfStatement: [Array],\\n        ImportDeclaration: [Array],\\n        ImportDefaultSpecifier: [Array],\\n        ImportNamespaceSpecifier: [Array],\\n        ImportSpecifier: [Array],\\n        MetaProperty: [Array],\\n        ClassMethod: [Array],\\n        ObjectPattern: [Array],\\n        SpreadElement: [Array],\\n        Super: [],\\n        TaggedTemplateExpression: [Array],\\n        TemplateElement: [],\\n        TemplateLiteral: [Array],\\n        YieldExpression: [Array],\\n        AnyTypeAnnotation: [],\\n        ArrayTypeAnnotation: [Array],\\n        BooleanTypeAnnotation: [],\\n        BooleanLiteralTypeAnnotation: [],\\n        NullLiteralTypeAnnotation: [],\\n        ClassImplements: [Array],\\n        ClassProperty: [Array],\\n        DeclareClass: [Array],\\n        DeclareFunction: [Array],\\n        DeclareInterface: [Array],\\n        DeclareModule: [Array],\\n        DeclareModuleExports: [Array],\\n        DeclareTypeAlias: [Array],\\n        DeclareOpaqueType: [Array],\\n        DeclareVariable: [Array],\\n        DeclareExportDeclaration: [Array],\\n        ExistentialTypeParam: [],\\n        FunctionTypeAnnotation: [Array],\\n        FunctionTypeParam: [Array],\\n        GenericTypeAnnotation: [Array],\\n        InterfaceExtends: [Array],\\n        InterfaceDeclaration: [Array],\\n        IntersectionTypeAnnotation: [Array],\\n        MixedTypeAnnotation: [],\\n        EmptyTypeAnnotation: [],\\n        NullableTypeAnnotation: [Array],\\n        NumericLiteralTypeAnnotation: [],\\n        NumberTypeAnnotation: [],\\n        StringLiteralTypeAnnotation: [],\\n        StringTypeAnnotation: [],\\n        ThisTypeAnnotation: [],\\n        TupleTypeAnnotation: [Array],\\n        TypeofTypeAnnotation: [Array],\\n        TypeAlias: [Array],\\n        OpaqueType: [Array],\\n        TypeAnnotation: [Array],\\n        TypeCastExpression: [Array],\\n        TypeParameter: [Array],\\n        TypeParameterDeclaration: [Array],\\n        TypeParameterInstantiation: [Array],\\n        ObjectTypeAnnotation: [Array],\\n        ObjectTypeCallProperty: [Array],\\n        ObjectTypeIndexer: [Array],\\n        ObjectTypeProperty: [Array],\\n        ObjectTypeSpreadProperty: [Array],\\n        QualifiedTypeIdentifier: [Array],\\n        UnionTypeAnnotation: [Array],\\n        VoidTypeAnnotation: [],\\n        JSXAttribute: [Array],\\n        JSXClosingElement: [Array],\\n        JSXElement: [Array],\\n        JSXEmptyExpression: [],\\n        JSXExpressionContainer: [Array],\\n        JSXSpreadChild: [Array],\\n        JSXIdentifier: [],\\n        JSXMemberExpression: [Array],\\n        JSXNamespacedName: [Array],\\n        JSXOpeningElement: [Array],\\n        JSXSpreadAttribute: [Array],\\n        JSXText: [],\\n        Noop: [],\\n        ParenthesizedExpression: [Array],\\n        AwaitExpression: [Array],\\n        ForAwaitStatement: [Array],\\n        BindExpression: [Array],\\n        Import: [],\\n        Decorator: [Array],\\n        DoExpression: [Array],\\n        ExportDefaultSpecifier: [Array],\\n        ExportNamespaceSpecifier: [Array],\\n        RestProperty: [Array],\\n        SpreadProperty: [Array] },\\n     ALIAS_KEYS: \\n      { ArrayExpression: [Array],\\n        AssignmentExpression: [Array],\\n        BinaryExpression: [Array],\\n        Directive: [],\\n        DirectiveLiteral: [],\\n        BlockStatement: [Array],\\n        BreakStatement: [Array],\\n        CallExpression: [Array],\\n        CatchClause: [Array],\\n        ConditionalExpression: [Array],\\n        ContinueStatement: [Array],\\n        DebuggerStatement: [Array],\\n        DoWhileStatement: [Array],\\n        EmptyStatement: [Array],\\n        ExpressionStatement: [Array],\\n        File: [],\\n        ForInStatement: [Array],\\n        ForStatement: [Array],\\n        FunctionDeclaration: [Array],\\n        FunctionExpression: [Array],\\n        Identifier: [Array],\\n        IfStatement: [Array],\\n        LabeledStatement: [Array],\\n        StringLiteral: [Array],\\n        NumericLiteral: [Array],\\n        NullLiteral: [Array],\\n        BooleanLiteral: [Array],\\n        RegExpLiteral: [Array],\\n        LogicalExpression: [Array],\\n        MemberExpression: [Array],\\n        NewExpression: [Array],\\n        Program: [Array],\\n        ObjectExpression: [Array],\\n        ObjectMethod: [Array],\\n        ObjectProperty: [Array],\\n        RestElement: [Array],\\n        ReturnStatement: [Array],\\n        SequenceExpression: [Array],\\n        SwitchCase: [],\\n        SwitchStatement: [Array],\\n        ThisExpression: [Array],\\n        ThrowStatement: [Array],\\n        TryStatement: [Array],\\n        UnaryExpression: [Array],\\n        UpdateExpression: [Array],\\n        VariableDeclaration: [Array],\\n        VariableDeclarator: [],\\n        WhileStatement: [Array],\\n        WithStatement: [Array],\\n        AssignmentPattern: [Array],\\n        ArrayPattern: [Array],\\n        ArrowFunctionExpression: [Array],\\n        ClassBody: [],\\n        ClassDeclaration: [Array],\\n        ClassExpression: [Array],\\n        ExportAllDeclaration: [Array],\\n        ExportDefaultDeclaration: [Array],\\n        ExportNamedDeclaration: [Array],\\n        ExportSpecifier: [Array],\\n        ForOfStatement: [Array],\\n        ImportDeclaration: [Array],\\n        ImportDefaultSpecifier: [Array],\\n        ImportNamespaceSpecifier: [Array],\\n        ImportSpecifier: [Array],\\n        MetaProperty: [Array],\\n        ClassMethod: [Array],\\n        ObjectPattern: [Array],\\n        SpreadElement: [Array],\\n        Super: [Array],\\n        TaggedTemplateExpression: [Array],\\n        TemplateElement: [],\\n        TemplateLiteral: [Array],\\n        YieldExpression: [Array],\\n        AnyTypeAnnotation: [Array],\\n        ArrayTypeAnnotation: [Array],\\n        BooleanTypeAnnotation: [Array],\\n        BooleanLiteralTypeAnnotation: [Array],\\n        NullLiteralTypeAnnotation: [Array],\\n        ClassImplements: [Array],\\n        ClassProperty: [Array],\\n        DeclareClass: [Array],\\n        DeclareFunction: [Array],\\n        DeclareInterface: [Array],\\n        DeclareModule: [Array],\\n        DeclareModuleExports: [Array],\\n        DeclareTypeAlias: [Array],\\n        DeclareOpaqueType: [Array],\\n        DeclareVariable: [Array],\\n        DeclareExportDeclaration: [Array],\\n        ExistentialTypeParam: [Array],\\n        FunctionTypeAnnotation: [Array],\\n        FunctionTypeParam: [Array],\\n        GenericTypeAnnotation: [Array],\\n        InterfaceExtends: [Array],\\n        InterfaceDeclaration: [Array],\\n        IntersectionTypeAnnotation: [Array],\\n        MixedTypeAnnotation: [Array],\\n        EmptyTypeAnnotation: [Array],\\n        NullableTypeAnnotation: [Array],\\n        NumericLiteralTypeAnnotation: [Array],\\n        NumberTypeAnnotation: [Array],\\n        StringLiteralTypeAnnotation: [Array],\\n        StringTypeAnnotation: [Array],\\n        ThisTypeAnnotation: [Array],\\n        TupleTypeAnnotation: [Array],\\n        TypeofTypeAnnotation: [Array],\\n        TypeAlias: [Array],\\n        OpaqueType: [Array],\\n        TypeAnnotation: [Array],\\n        TypeCastExpression: [Array],\\n        TypeParameter: [Array],\\n        TypeParameterDeclaration: [Array],\\n        TypeParameterInstantiation: [Array],\\n        ObjectTypeAnnotation: [Array],\\n        ObjectTypeCallProperty: [Array],\\n        ObjectTypeIndexer: [Array],\\n        ObjectTypeProperty: [Array],\\n        ObjectTypeSpreadProperty: [Array],\\n        QualifiedTypeIdentifier: [Array],\\n        UnionTypeAnnotation: [Array],\\n        VoidTypeAnnotation: [Array],\\n        JSXAttribute: [Array],\\n        JSXClosingElement: [Array],\\n        JSXElement: [Array],\\n        JSXEmptyExpression: [Array],\\n        JSXExpressionContainer: [Array],\\n        JSXSpreadChild: [Array],\\n        JSXIdentifier: [Array],\\n        JSXMemberExpression: [Array],\\n        JSXNamespacedName: [Array],\\n        JSXOpeningElement: [Array],\\n        JSXSpreadAttribute: [Array],\\n        JSXText: [Array],\\n        Noop: [],\\n        ParenthesizedExpression: [Array],\\n        AwaitExpression: [Array],\\n        ForAwaitStatement: [Array],\\n        BindExpression: [Array],\\n        Import: [Array],\\n        Decorator: [],\\n        DoExpression: [Array],\\n        ExportDefaultSpecifier: [Array],\\n        ExportNamespaceSpecifier: [Array],\\n        RestProperty: [Array],\\n        SpreadProperty: [Array] },\\n     NODE_FIELDS: \\n      { ArrayExpression: [Object],\\n        AssignmentExpression: [Object],\\n        BinaryExpression: [Object],\\n        Directive: [Object],\\n        DirectiveLiteral: [Object],\\n        BlockStatement: [Object],\\n        BreakStatement: [Object],\\n        CallExpression: [Object],\\n        CatchClause: [Object],\\n        ConditionalExpression: [Object],\\n        ContinueStatement: [Object],\\n        DebuggerStatement: {},\\n        DoWhileStatement: [Object],\\n        EmptyStatement: {},\\n        ExpressionStatement: [Object],\\n        File: [Object],\\n        ForInStatement: [Object],\\n        ForStatement: [Object],\\n        FunctionDeclaration: [Object],\\n        FunctionExpression: [Object],\\n        Identifier: [Object],\\n        IfStatement: [Object],\\n        LabeledStatement: [Object],\\n        StringLiteral: [Object],\\n        NumericLiteral: [Object],\\n        NullLiteral: {},\\n        BooleanLiteral: [Object],\\n        RegExpLiteral: [Object],\\n        LogicalExpression: [Object],\\n        MemberExpression: [Object],\\n        NewExpression: [Object],\\n        Program: [Object],\\n        ObjectExpression: [Object],\\n        ObjectMethod: [Object],\\n        ObjectProperty: [Object],\\n        RestElement: [Object],\\n        ReturnStatement: [Object],\\n        SequenceExpression: [Object],\\n        SwitchCase: [Object],\\n        SwitchStatement: [Object],\\n        ThisExpression: {},\\n        ThrowStatement: [Object],\\n        TryStatement: [Object],\\n        UnaryExpression: [Object],\\n        UpdateExpression: [Object],\\n        VariableDeclaration: [Object],\\n        VariableDeclarator: [Object],\\n        WhileStatement: [Object],\\n        WithStatement: [Object],\\n        AssignmentPattern: [Object],\\n        ArrayPattern: [Object],\\n        ArrowFunctionExpression: [Object],\\n        ClassBody: [Object],\\n        ClassDeclaration: [Object],\\n        ClassExpression: [Object],\\n        ExportAllDeclaration: [Object],\\n        ExportDefaultDeclaration: [Object],\\n        ExportNamedDeclaration: [Object],\\n        ExportSpecifier: [Object],\\n        ForOfStatement: [Object],\\n        ImportDeclaration: [Object],\\n        ImportDefaultSpecifier: [Object],\\n        ImportNamespaceSpecifier: [Object],\\n        ImportSpecifier: [Object],\\n        MetaProperty: [Object],\\n        ClassMethod: [Object],\\n        ObjectPattern: [Object],\\n        SpreadElement: [Object],\\n        Super: {},\\n        TaggedTemplateExpression: [Object],\\n        TemplateElement: [Object],\\n        TemplateLiteral: [Object],\\n        YieldExpression: [Object],\\n        AnyTypeAnnotation: {},\\n        ArrayTypeAnnotation: [Object],\\n        BooleanTypeAnnotation: {},\\n        BooleanLiteralTypeAnnotation: {},\\n        NullLiteralTypeAnnotation: {},\\n        ClassImplements: [Object],\\n        ClassProperty: [Object],\\n        DeclareClass: [Object],\\n        DeclareFunction: [Object],\\n        DeclareInterface: [Object],\\n        DeclareModule: [Object],\\n        DeclareModuleExports: [Object],\\n        DeclareTypeAlias: [Object],\\n        DeclareOpaqueType: [Object],\\n        DeclareVariable: [Object],\\n        DeclareExportDeclaration: [Object],\\n        ExistentialTypeParam: {},\\n        FunctionTypeAnnotation: [Object],\\n        FunctionTypeParam: [Object],\\n        GenericTypeAnnotation: [Object],\\n        InterfaceExtends: [Object],\\n        InterfaceDeclaration: [Object],\\n        IntersectionTypeAnnotation: [Object],\\n        MixedTypeAnnotation: {},\\n        EmptyTypeAnnotation: {},\\n        NullableTypeAnnotation: [Object],\\n        NumericLiteralTypeAnnotation: {},\\n        NumberTypeAnnotation: {},\\n        StringLiteralTypeAnnotation: {},\\n        StringTypeAnnotation: {},\\n        ThisTypeAnnotation: {},\\n        TupleTypeAnnotation: [Object],\\n        TypeofTypeAnnotation: [Object],\\n        TypeAlias: [Object],\\n        OpaqueType: [Object],\\n        TypeAnnotation: [Object],\\n        TypeCastExpression: [Object],\\n        TypeParameter: [Object],\\n        TypeParameterDeclaration: [Object],\\n        TypeParameterInstantiation: [Object],\\n        ObjectTypeAnnotation: [Object],\\n        ObjectTypeCallProperty: [Object],\\n        ObjectTypeIndexer: [Object],\\n        ObjectTypeProperty: [Object],\\n        ObjectTypeSpreadProperty: [Object],\\n        QualifiedTypeIdentifier: [Object],\\n        UnionTypeAnnotation: [Object],\\n        VoidTypeAnnotation: {},\\n        JSXAttribute: [Object],\\n        JSXClosingElement: [Object],\\n        JSXElement: [Object],\\n        JSXEmptyExpression: {},\\n        JSXExpressionContainer: [Object],\\n        JSXSpreadChild: [Object],\\n        JSXIdentifier: [Object],\\n        JSXMemberExpression: [Object],\\n        JSXNamespacedName: [Object],\\n        JSXOpeningElement: [Object],\\n        JSXSpreadAttribute: [Object],\\n        JSXText: [Object],\\n        Noop: {},\\n        ParenthesizedExpression: [Object],\\n        AwaitExpression: [Object],\\n        ForAwaitStatement: [Object],\\n        BindExpression: [Object],\\n        Import: {},\\n        Decorator: [Object],\\n        DoExpression: [Object],\\n        ExportDefaultSpecifier: [Object],\\n        ExportNamespaceSpecifier: [Object],\\n        RestProperty: [Object],\\n        SpreadProperty: [Object] },\\n     BUILDER_KEYS: \\n      { ArrayExpression: [Array],\\n        AssignmentExpression: [Array],\\n        BinaryExpression: [Array],\\n        Directive: [Array],\\n        DirectiveLiteral: [Array],\\n        BlockStatement: [Array],\\n        BreakStatement: [Array],\\n        CallExpression: [Array],\\n        CatchClause: [Array],\\n        ConditionalExpression: [Array],\\n        ContinueStatement: [Array],\\n        DebuggerStatement: [],\\n        DoWhileStatement: [Array],\\n        EmptyStatement: [],\\n        ExpressionStatement: [Array],\\n        File: [Array],\\n        ForInStatement: [Array],\\n        ForStatement: [Array],\\n        FunctionDeclaration: [Array],\\n        FunctionExpression: [Array],\\n        Identifier: [Array],\\n        IfStatement: [Array],\\n        LabeledStatement: [Array],\\n        StringLiteral: [Array],\\n        NumericLiteral: [Array],\\n        NullLiteral: [],\\n        BooleanLiteral: [Array],\\n        RegExpLiteral: [Array],\\n        LogicalExpression: [Array],\\n        MemberExpression: [Array],\\n        NewExpression: [Array],\\n        Program: [Array],\\n        ObjectExpression: [Array],\\n        ObjectMethod: [Array],\\n        ObjectProperty: [Array],\\n        RestElement: [Array],\\n        ReturnStatement: [Array],\\n        SequenceExpression: [Array],\\n        SwitchCase: [Array],\\n        SwitchStatement: [Array],\\n        ThisExpression: [],\\n        ThrowStatement: [Array],\\n        TryStatement: [Array],\\n        UnaryExpression: [Array],\\n        UpdateExpression: [Array],\\n        VariableDeclaration: [Array],\\n        VariableDeclarator: [Array],\\n        WhileStatement: [Array],\\n        WithStatement: [Array],\\n        AssignmentPattern: [Array],\\n        ArrayPattern: [Array],\\n        ArrowFunctionExpression: [Array],\\n        ClassBody: [Array],\\n        ClassDeclaration: [Array],\\n        ClassExpression: [Array],\\n        ExportAllDeclaration: [Array],\\n        ExportDefaultDeclaration: [Array],\\n        ExportNamedDeclaration: [Array],\\n        ExportSpecifier: [Array],\\n        ForOfStatement: [Array],\\n        ImportDeclaration: [Array],\\n        ImportDefaultSpecifier: [Array],\\n        ImportNamespaceSpecifier: [Array],\\n        ImportSpecifier: [Array],\\n        MetaProperty: [Array],\\n        ClassMethod: [Array],\\n        ObjectPattern: [Array],\\n        SpreadElement: [Array],\\n        Super: [],\\n        TaggedTemplateExpression: [Array],\\n        TemplateElement: [Array],\\n        TemplateLiteral: [Array],\\n        YieldExpression: [Array],\\n        AnyTypeAnnotation: [],\\n        ArrayTypeAnnotation: [Array],\\n        BooleanTypeAnnotation: [],\\n        BooleanLiteralTypeAnnotation: [],\\n        NullLiteralTypeAnnotation: [],\\n        ClassImplements: [Array],\\n        ClassProperty: [Array],\\n        DeclareClass: [Array],\\n        DeclareFunction: [Array],\\n        DeclareInterface: [Array],\\n        DeclareModule: [Array],\\n        DeclareModuleExports: [Array],\\n        DeclareTypeAlias: [Array],\\n        DeclareOpaqueType: [Array],\\n        DeclareVariable: [Array],\\n        DeclareExportDeclaration: [Array],\\n        ExistentialTypeParam: [],\\n        FunctionTypeAnnotation: [Array],\\n        FunctionTypeParam: [Array],\\n        GenericTypeAnnotation: [Array],\\n        InterfaceExtends: [Array],\\n        InterfaceDeclaration: [Array],\\n        IntersectionTypeAnnotation: [Array],\\n        MixedTypeAnnotation: [],\\n        EmptyTypeAnnotation: [],\\n        NullableTypeAnnotation: [Array],\\n        NumericLiteralTypeAnnotation: [],\\n        NumberTypeAnnotation: [],\\n        StringLiteralTypeAnnotation: [],\\n        StringTypeAnnotation: [],\\n        ThisTypeAnnotation: [],\\n        TupleTypeAnnotation: [Array],\\n        TypeofTypeAnnotation: [Array],\\n        TypeAlias: [Array],\\n        OpaqueType: [Array],\\n        TypeAnnotation: [Array],\\n        TypeCastExpression: [Array],\\n        TypeParameter: [Array],\\n        TypeParameterDeclaration: [Array],\\n        TypeParameterInstantiation: [Array],\\n        ObjectTypeAnnotation: [Array],\\n        ObjectTypeCallProperty: [Array],\\n        ObjectTypeIndexer: [Array],\\n        ObjectTypeProperty: [Array],\\n        ObjectTypeSpreadProperty: [Array],\\n        QualifiedTypeIdentifier: [Array],\\n        UnionTypeAnnotation: [Array],\\n        VoidTypeAnnotation: [],\\n        JSXAttribute: [Array],\\n        JSXClosingElement: [Array],\\n        JSXElement: [Array],\\n        JSXEmptyExpression: [],\\n        JSXExpressionContainer: [Array],\\n        JSXSpreadChild: [Array],\\n        JSXIdentifier: [Array],\\n        JSXMemberExpression: [Array],\\n        JSXNamespacedName: [Array],\\n        JSXOpeningElement: [Array],\\n        JSXSpreadAttribute: [Array],\\n        JSXText: [Array],\\n        Noop: [],\\n        ParenthesizedExpression: [Array],\\n        AwaitExpression: [Array],\\n        ForAwaitStatement: [Array],\\n        BindExpression: [Array],\\n        Import: [],\\n        Decorator: [Array],\\n        DoExpression: [Array],\\n        ExportDefaultSpecifier: [Array],\\n        ExportNamespaceSpecifier: [Array],\\n        RestProperty: [Array],\\n        SpreadProperty: [Array] },\\n     DEPRECATED_KEYS: \\n      { NumberLiteral: 'NumericLiteral',\\n        RegexLiteral: 'RegExpLiteral' },\\n     react: \\n      { __esModule: true,\\n        isReactComponent: [Function],\\n        isCompatTag: [Function: isCompatTag],\\n        buildChildren: [Function: buildChildren] },\\n     TYPES: \\n      [ 'ArrayExpression',\\n        'AssignmentExpression',\\n        'BinaryExpression',\\n        'Directive',\\n        'DirectiveLiteral',\\n        'BlockStatement',\\n        'BreakStatement',\\n        'CallExpression',\\n        'CatchClause',\\n        'ConditionalExpression',\\n        'ContinueStatement',\\n        'DebuggerStatement',\\n        'DoWhileStatement',\\n        'EmptyStatement',\\n        'ExpressionStatement',\\n        'File',\\n        'ForInStatement',\\n        'ForStatement',\\n        'FunctionDeclaration',\\n        'FunctionExpression',\\n        'Identifier',\\n        'IfStatement',\\n        'LabeledStatement',\\n        'StringLiteral',\\n        'NumericLiteral',\\n        'NullLiteral',\\n        'BooleanLiteral',\\n        'RegExpLiteral',\\n        'LogicalExpression',\\n        'MemberExpression',\\n        'NewExpression',\\n        'Program',\\n        'ObjectExpression',\\n        'ObjectMethod',\\n        'ObjectProperty',\\n        'RestElement',\\n        'ReturnStatement',\\n        'SequenceExpression',\\n        'SwitchCase',\\n        'SwitchStatement',\\n        'ThisExpression',\\n        'ThrowStatement',\\n        'TryStatement',\\n        'UnaryExpression',\\n        'UpdateExpression',\\n        'VariableDeclaration',\\n        'VariableDeclarator',\\n        'WhileStatement',\\n        'WithStatement',\\n        'AssignmentPattern',\\n        'ArrayPattern',\\n        'ArrowFunctionExpression',\\n        'ClassBody',\\n        'ClassDeclaration',\\n        'ClassExpression',\\n        'ExportAllDeclaration',\\n        'ExportDefaultDeclaration',\\n        'ExportNamedDeclaration',\\n        'ExportSpecifier',\\n        'ForOfStatement',\\n        'ImportDeclaration',\\n        'ImportDefaultSpecifier',\\n        'ImportNamespaceSpecifier',\\n        'ImportSpecifier',\\n        'MetaProperty',\\n        'ClassMethod',\\n        'ObjectPattern',\\n        'SpreadElement',\\n        'Super',\\n        'TaggedTemplateExpression',\\n        'TemplateElement',\\n        'TemplateLiteral',\\n        'YieldExpression',\\n        'AnyTypeAnnotation',\\n        'ArrayTypeAnnotation',\\n        'BooleanTypeAnnotation',\\n        'BooleanLiteralTypeAnnotation',\\n        'NullLiteralTypeAnnotation',\\n        'ClassImplements',\\n        'ClassProperty',\\n        'DeclareClass',\\n        'DeclareFunction',\\n        'DeclareInterface',\\n        'DeclareModule',\\n        'DeclareModuleExports',\\n        'DeclareTypeAlias',\\n        'DeclareOpaqueType',\\n        'DeclareVariable',\\n        'DeclareExportDeclaration',\\n        'ExistentialTypeParam',\\n        'FunctionTypeAnnotation',\\n        'FunctionTypeParam',\\n        'GenericTypeAnnotation',\\n        'InterfaceExtends',\\n        'InterfaceDeclaration',\\n        'IntersectionTypeAnnotation',\\n        'MixedTypeAnnotation',\\n        'EmptyTypeAnnotation',\\n        'NullableTypeAnnotation',\\n        'NumericLiteralTypeAnnotation',\\n        ... 92 more items ],\\n     getBindingIdentifiers: [Getter],\\n     getOuterBindingIdentifiers: [Getter],\\n     isBinding: [Getter],\\n     isReferenced: [Getter],\\n     isValidIdentifier: [Getter],\\n     isLet: [Getter],\\n     isBlockScoped: [Getter],\\n     isVar: [Getter],\\n     isSpecifierDefault: [Getter],\\n     isScope: [Getter],\\n     isImmutable: [Getter],\\n     isNodesEquivalent: [Getter],\\n     toComputedKey: [Getter],\\n     toSequenceExpression: [Getter],\\n     toKeyAlias: [Getter],\\n     toIdentifier: [Getter],\\n     toBindingIdentifierName: [Getter],\\n     toStatement: [Getter],\\n     toExpression: [Getter],\\n     toBlock: [Getter],\\n     valueToNode: [Getter],\\n     createUnionTypeAnnotation: [Getter],\\n     removeTypeDuplicates: [Getter],\\n     createTypeAnnotationBasedOnTypeof: [Getter],\\n     is: [Function: is],\\n     isType: [Function: isType],\\n     validate: [Function: validate],\\n     shallowEqual: [Function: shallowEqual],\\n     appendToMemberExpression: [Function: appendToMemberExpression],\\n     prependToMemberExpression: [Function: prependToMemberExpression],\\n     ensureBlock: [Function: ensureBlock],\\n     clone: [Function: clone],\\n     cloneWithoutLoc: [Function: cloneWithoutLoc],\\n     cloneDeep: [Function: cloneDeep],\\n     buildMatchMemberExpression: [Function: buildMatchMemberExpression],\\n     removeComments: [Function: removeComments],\\n     inheritsComments: [Function: inheritsComments],\\n     inheritTrailingComments: [Function: inheritTrailingComments],\\n     inheritLeadingComments: [Function: inheritLeadingComments],\\n     inheritInnerComments: [Function: inheritInnerComments],\\n     inherits: [Function: inherits],\\n     assertNode: [Function: assertNode],\\n     isNode: [Function: isNode],\\n     traverseFast: [Function: traverseFast],\\n     removeProperties: [Function: removeProperties],\\n     removePropertiesDeep: [Function: removePropertiesDeep],\\n     isArrayExpression: [Function],\\n     assertArrayExpression: [Function],\\n     isAssignmentExpression: [Function],\\n     assertAssignmentExpression: [Function],\\n     isBinaryExpression: [Function],\\n     assertBinaryExpression: [Function],\\n     isDirective: [Function],\\n     assertDirective: [Function],\\n     isDirectiveLiteral: [Function],\\n     assertDirectiveLiteral: [Function],\\n     isBlockStatement: [Function],\\n     assertBlockStatement: [Function],\\n     isBreakStatement: [Function],\\n     assertBreakStatement: [Function],\\n     isCallExpression: [Function],\\n     assertCallExpression: [Function],\\n     isCatchClause: [Function],\\n     assertCatchClause: [Function],\\n     isConditionalExpression: [Function],\\n     assertConditionalExpression: [Function],\\n     isContinueStatement: [Function],\\n     assertContinueStatement: [Function],\\n     isDebuggerStatement: [Function],\\n     assertDebuggerStatement: [Function],\\n     isDoWhileStatement: [Function],\\n     assertDoWhileStatement: [Function],\\n     isEmptyStatement: [Function],\\n     assertEmptyStatement: [Function],\\n     isExpressionStatement: [Function],\\n     assertExpressionStatement: [Function],\\n     isFile: [Function],\\n     assertFile: [Function],\\n     isForInStatement: [Function],\\n     assertForInStatement: [Function],\\n     isForStatement: [Function],\\n     assertForStatement: [Function],\\n     isFunctionDeclaration: [Function],\\n     assertFunctionDeclaration: [Function],\\n     isFunctionExpression: [Function],\\n     assertFunctionExpression: [Function],\\n     isIdentifier: [Function],\\n     assertIdentifier: [Function],\\n     isIfStatement: [Function],\\n     assertIfStatement: [Function],\\n     isLabeledStatement: [Function],\\n     assertLabeledStatement: [Function],\\n     isStringLiteral: [Function],\\n     assertStringLiteral: [Function],\\n     isNumericLiteral: [Function],\\n     assertNumericLiteral: [Function],\\n     isNullLiteral: [Function],\\n     assertNullLiteral: [Function],\\n     isBooleanLiteral: [Function],\\n     assertBooleanLiteral: [Function],\\n     isRegExpLiteral: [Function],\\n     assertRegExpLiteral: [Function],\\n     isLogicalExpression: [Function],\\n     assertLogicalExpression: [Function],\\n     isMemberExpression: [Function],\\n     assertMemberExpression: [Function],\\n     isNewExpression: [Function],\\n     assertNewExpression: [Function],\\n     isProgram: [Function],\\n     assertProgram: [Function],\\n     isObjectExpression: [Function],\\n     assertObjectExpression: [Function],\\n     isObjectMethod: [Function],\\n     assertObjectMethod: [Function],\\n     isObjectProperty: [Function],\\n     assertObjectProperty: [Function],\\n     isRestElement: [Function],\\n     assertRestElement: [Function],\\n     isReturnStatement: [Function],\\n     assertReturnStatement: [Function],\\n     isSequenceExpression: [Function],\\n     assertSequenceExpression: [Function],\\n     isSwitchCase: [Function],\\n     assertSwitchCase: [Function],\\n     isSwitchStatement: [Function],\\n     assertSwitchStatement: [Function],\\n     isThisExpression: [Function],\\n     assertThisExpression: [Function],\\n     isThrowStatement: [Function],\\n     assertThrowStatement: [Function],\\n     isTryStatement: [Function],\\n     assertTryStatement: [Function],\\n     isUnaryExpression: [Function],\\n     assertUnaryExpression: [Function],\\n     isUpdateExpression: [Function],\\n     assertUpdateExpression: [Function],\\n     isVariableDeclaration: [Function],\\n     assertVariableDeclaration: [Function],\\n     isVariableDeclarator: [Function],\\n     assertVariableDeclarator: [Function],\\n     isWhileStatement: [Function],\\n     assertWhileStatement: [Function],\\n     isWithStatement: [Function],\\n     assertWithStatement: [Function],\\n     isAssignmentPattern: [Function],\\n     assertAssignmentPattern: [Function],\\n     isArrayPattern: [Function],\\n     assertArrayPattern: [Function],\\n     isArrowFunctionExpression: [Function],\\n     assertArrowFunctionExpression: [Function],\\n     isClassBody: [Function],\\n     assertClassBody: [Function],\\n     isClassDeclaration: [Function],\\n     assertClassDeclaration: [Function],\\n     isClassExpression: [Function],\\n     assertClassExpression: [Function],\\n     isExportAllDeclaration: [Function],\\n     assertExportAllDeclaration: [Function],\\n     isExportDefaultDeclaration: [Function],\\n     assertExportDefaultDeclaration: [Function],\\n     isExportNamedDeclaration: [Function],\\n     assertExportNamedDeclaration: [Function],\\n     isExportSpecifier: [Function],\\n     assertExportSpecifier: [Function],\\n     isForOfStatement: [Function],\\n     assertForOfStatement: [Function],\\n     isImportDeclaration: [Function],\\n     assertImportDeclaration: [Function],\\n     isImportDefaultSpecifier: [Function],\\n     assertImportDefaultSpecifier: [Function],\\n     isImportNamespaceSpecifier: [Function],\\n     assertImportNamespaceSpecifier: [Function],\\n     isImportSpecifier: [Function],\\n     assertImportSpecifier: [Function],\\n     isMetaProperty: [Function],\\n     assertMetaProperty: [Function],\\n     isClassMethod: [Function],\\n     assertClassMethod: [Function],\\n     isObjectPattern: [Function],\\n     assertObjectPattern: [Function],\\n     isSpreadElement: [Function],\\n     assertSpreadElement: [Function],\\n     isSuper: [Function],\\n     assertSuper: [Function],\\n     isTaggedTemplateExpression: [Function],\\n     assertTaggedTemplateExpression: [Function],\\n     isTemplateElement: [Function],\\n     assertTemplateElement: [Function],\\n     isTemplateLiteral: [Function],\\n     assertTemplateLiteral: [Function],\\n     isYieldExpression: [Function],\\n     assertYieldExpression: [Function],\\n     isAnyTypeAnnotation: [Function],\\n     assertAnyTypeAnnotation: [Function],\\n     isArrayTypeAnnotation: [Function],\\n     assertArrayTypeAnnotation: [Function],\\n     isBooleanTypeAnnotation: [Function],\\n     assertBooleanTypeAnnotation: [Function],\\n     isBooleanLiteralTypeAnnotation: [Function],\\n     assertBooleanLiteralTypeAnnotation: [Function],\\n     isNullLiteralTypeAnnotation: [Function],\\n     assertNullLiteralTypeAnnotation: [Function],\\n     isClassImplements: [Function],\\n     assertClassImplements: [Function],\\n     isClassProperty: [Function],\\n     assertClassProperty: [Function],\\n     isDeclareClass: [Function],\\n     assertDeclareClass: [Function],\\n     isDeclareFunction: [Function],\\n     assertDeclareFunction: [Function],\\n     isDeclareInterface: [Function],\\n     assertDeclareInterface: [Function],\\n     isDeclareModule: [Function],\\n     assertDeclareModule: [Function],\\n     isDeclareModuleExports: [Function],\\n     assertDeclareModuleExports: [Function],\\n     isDeclareTypeAlias: [Function],\\n     assertDeclareTypeAlias: [Function],\\n     isDeclareOpaqueType: [Function],\\n     assertDeclareOpaqueType: [Function],\\n     isDeclareVariable: [Function],\\n     assertDeclareVariable: [Function],\\n     isDeclareExportDeclaration: [Function],\\n     assertDeclareExportDeclaration: [Function],\\n     isExistentialTypeParam: [Function],\\n     assertExistentialTypeParam: [Function],\\n     isFunctionTypeAnnotation: [Function],\\n     assertFunctionTypeAnnotation: [Function],\\n     isFunctionTypeParam: [Function],\\n     assertFunctionTypeParam: [Function],\\n     isGenericTypeAnnotation: [Function],\\n     assertGenericTypeAnnotation: [Function],\\n     isInterfaceExtends: [Function],\\n     assertInterfaceExtends: [Function],\\n     isInterfaceDeclaration: [Function],\\n     assertInterfaceDeclaration: [Function],\\n     isIntersectionTypeAnnotation: [Function],\\n     assertIntersectionTypeAnnotation: [Function],\\n     isMixedTypeAnnotation: [Function],\\n     assertMixedTypeAnnotation: [Function],\\n     isEmptyTypeAnnotation: [Function],\\n     assertEmptyTypeAnnotation: [Function],\\n     isNullableTypeAnnotation: [Function],\\n     assertNullableTypeAnnotation: [Function],\\n     isNumericLiteralTypeAnnotation: [Function],\\n     assertNumericLiteralTypeAnnotation: [Function],\\n     isNumberTypeAnnotation: [Function],\\n     assertNumberTypeAnnotation: [Function],\\n     isStringLiteralTypeAnnotation: [Function],\\n     assertStringLiteralTypeAnnotation: [Function],\\n     isStringTypeAnnotation: [Function],\\n     assertStringTypeAnnotation: [Function],\\n     isThisTypeAnnotation: [Function],\\n     assertThisTypeAnnotation: [Function],\\n     isTupleTypeAnnotation: [Function],\\n     assertTupleTypeAnnotation: [Function],\\n     isTypeofTypeAnnotation: [Function],\\n     assertTypeofTypeAnnotation: [Function],\\n     isTypeAlias: [Function],\\n     assertTypeAlias: [Function],\\n     isOpaqueType: [Function],\\n     assertOpaqueType: [Function],\\n     isTypeAnnotation: [Function],\\n     assertTypeAnnotation: [Function],\\n     isTypeCastExpression: [Function],\\n     assertTypeCastExpression: [Function],\\n     isTypeParameter: [Function],\\n     assertTypeParameter: [Function],\\n     isTypeParameterDeclaration: [Function],\\n     assertTypeParameterDeclaration: [Function],\\n     isTypeParameterInstantiation: [Function],\\n     assertTypeParameterInstantiation: [Function],\\n     isObjectTypeAnnotation: [Function],\\n     assertObjectTypeAnnotation: [Function],\\n     isObjectTypeCallProperty: [Function],\\n     assertObjectTypeCallProperty: [Function],\\n     isObjectTypeIndexer: [Function],\\n     assertObjectTypeIndexer: [Function],\\n     isObjectTypeProperty: [Function],\\n     assertObjectTypeProperty: [Function],\\n     isObjectTypeSpreadProperty: [Function],\\n     assertObjectTypeSpreadProperty: [Function],\\n     isQualifiedTypeIdentifier: [Function],\\n     assertQualifiedTypeIdentifier: [Function],\\n     isUnionTypeAnnotation: [Function],\\n     assertUnionTypeAnnotation: [Function],\\n     isVoidTypeAnnotation: [Function],\\n     assertVoidTypeAnnotation: [Function],\\n     isJSXAttribute: [Function],\\n     assertJSXAttribute: [Function],\\n     isJSXClosingElement: [Function],\\n     assertJSXClosingElement: [Function],\\n     isJSXElement: [Function],\\n     assertJSXElement: [Function],\\n     isJSXEmptyExpression: [Function],\\n     assertJSXEmptyExpression: [Function],\\n     isJSXExpressionContainer: [Function],\\n     assertJSXExpressionContainer: [Function],\\n     isJSXSpreadChild: [Function],\\n     assertJSXSpreadChild: [Function],\\n     isJSXIdentifier: [Function],\\n     assertJSXIdentifier: [Function],\\n     isJSXMemberExpression: [Function],\\n     assertJSXMemberExpression: [Function],\\n     isJSXNamespacedName: [Function],\\n     assertJSXNamespacedName: [Function],\\n     isJSXOpeningElement: [Function],\\n     assertJSXOpeningElement: [Function],\\n     isJSXSpreadAttribute: [Function],\\n     assertJSXSpreadAttribute: [Function],\\n     isJSXText: [Function],\\n     assertJSXText: [Function],\\n     isNoop: [Function],\\n     assertNoop: [Function],\\n     isParenthesizedExpression: [Function],\\n     assertParenthesizedExpression: [Function],\\n     isAwaitExpression: [Function],\\n     assertAwaitExpression: [Function],\\n     isForAwaitStatement: [Function],\\n     assertForAwaitStatement: [Function],\\n     isBindExpression: [Function],\\n     assertBindExpression: [Function],\\n     isImport: [Function],\\n     assertImport: [Function],\\n     isDecorator: [Function],\\n     assertDecorator: [Function],\\n     isDoExpression: [Function],\\n     assertDoExpression: [Function],\\n     isExportDefaultSpecifier: [Function],\\n     assertExportDefaultSpecifier: [Function],\\n     isExportNamespaceSpecifier: [Function],\\n     assertExportNamespaceSpecifier: [Function],\\n     isRestProperty: [Function],\\n     assertRestProperty: [Function],\\n     isSpreadProperty: [Function],\\n     assertSpreadProperty: [Function],\\n     FLIPPED_ALIAS_KEYS: \\n      { Expression: [Array],\\n        Binary: [Array],\\n        Scopable: [Array],\\n        BlockParent: [Array],\\n        Block: [Array],\\n        Statement: [Array],\\n        Terminatorless: [Array],\\n        CompletionStatement: [Array],\\n        Conditional: [Array],\\n        Loop: [Array],\\n        While: [Array],\\n        ExpressionWrapper: [Array],\\n        For: [Array],\\n        ForXStatement: [Array],\\n        Function: [Array],\\n        FunctionParent: [Array],\\n        Pureish: [Array],\\n        Declaration: [Array],\\n        LVal: [Array],\\n        Literal: [Array],\\n        Immutable: [Array],\\n        UserWhitespacable: [Array],\\n        Method: [Array],\\n        ObjectMember: [Array],\\n        Property: [Array],\\n        UnaryLike: [Array],\\n        Pattern: [Array],\\n        Class: [Array],\\n        ModuleDeclaration: [Array],\\n        ExportDeclaration: [Array],\\n        ModuleSpecifier: [Array],\\n        Flow: [Array],\\n        FlowBaseAnnotation: [Array],\\n        FlowDeclaration: [Array],\\n        JSX: [Array] },\\n     EXPRESSION_TYPES: \\n      [ 'ArrayExpression',\\n        'AssignmentExpression',\\n        'BinaryExpression',\\n        'CallExpression',\\n        'ConditionalExpression',\\n        'FunctionExpression',\\n        'Identifier',\\n        'StringLiteral',\\n        'NumericLiteral',\\n        'NullLiteral',\\n        'BooleanLiteral',\\n        'RegExpLiteral',\\n        'LogicalExpression',\\n        'MemberExpression',\\n        'NewExpression',\\n        'ObjectExpression',\\n        'SequenceExpression',\\n        'ThisExpression',\\n        'UnaryExpression',\\n        'UpdateExpression',\\n        'ArrowFunctionExpression',\\n        'ClassExpression',\\n        'MetaProperty',\\n        'Super',\\n        'TaggedTemplateExpression',\\n        'TemplateLiteral',\\n        'YieldExpression',\\n        'TypeCastExpression',\\n        'JSXElement',\\n        'JSXEmptyExpression',\\n        'JSXIdentifier',\\n        'JSXMemberExpression',\\n        'ParenthesizedExpression',\\n        'AwaitExpression',\\n        'BindExpression',\\n        'Import',\\n        'DoExpression' ],\\n     isExpression: [Function],\\n     assertExpression: [Function],\\n     BINARY_TYPES: [ 'BinaryExpression', 'LogicalExpression' ],\\n     isBinary: [Function],\\n     assertBinary: [Function],\\n     SCOPABLE_TYPES: \\n      [ 'BlockStatement',\\n        'CatchClause',\\n        'DoWhileStatement',\\n        'ForInStatement',\\n        'ForStatement',\\n        'FunctionDeclaration',\\n        'FunctionExpression',\\n        'Program',\\n        'ObjectMethod',\\n        'SwitchStatement',\\n        'WhileStatement',\\n        'ArrowFunctionExpression',\\n        'ClassDeclaration',\\n        'ClassExpression',\\n        'ForOfStatement',\\n        'ClassMethod',\\n        'ForAwaitStatement' ],\\n     isScopable: [Function],\\n     assertScopable: [Function],\\n     BLOCKPARENT_TYPES: \\n      [ 'BlockStatement',\\n        'DoWhileStatement',\\n        'ForInStatement',\\n        'ForStatement',\\n        'FunctionDeclaration',\\n        'FunctionExpression',\\n        'Program',\\n        'ObjectMethod',\\n        'SwitchStatement',\\n        'WhileStatement',\\n        'ArrowFunctionExpression',\\n        'ForOfStatement',\\n        'ClassMethod',\\n        'ForAwaitStatement' ],\\n     isBlockParent: [Function],\\n     assertBlockParent: [Function],\\n     BLOCK_TYPES: [ 'BlockStatement', 'Program' ],\\n     isBlock: [Function],\\n     assertBlock: [Function],\\n     STATEMENT_TYPES: \\n      [ 'BlockStatement',\\n        'BreakStatement',\\n        'ContinueStatement',\\n        'DebuggerStatement',\\n        'DoWhileStatement',\\n        'EmptyStatement',\\n        'ExpressionStatement',\\n        'ForInStatement',\\n        'ForStatement',\\n        'FunctionDeclaration',\\n        'IfStatement',\\n        'LabeledStatement',\\n        'ReturnStatement',\\n        'SwitchStatement',\\n        'ThrowStatement',\\n        'TryStatement',\\n        'VariableDeclaration',\\n        'WhileStatement',\\n        'WithStatement',\\n        'ClassDeclaration',\\n        'ExportAllDeclaration',\\n        'ExportDefaultDeclaration',\\n        'ExportNamedDeclaration',\\n        'ForOfStatement',\\n        'ImportDeclaration',\\n        'DeclareClass',\\n        'DeclareFunction',\\n        'DeclareInterface',\\n        'DeclareModule',\\n        'DeclareModuleExports',\\n        'DeclareTypeAlias',\\n        'DeclareOpaqueType',\\n        'DeclareVariable',\\n        'DeclareExportDeclaration',\\n        'InterfaceDeclaration',\\n        'TypeAlias',\\n        'OpaqueType',\\n        'ForAwaitStatement' ],\\n     isStatement: [Function],\\n     assertStatement: [Function],\\n     TERMINATORLESS_TYPES: \\n      [ 'BreakStatement',\\n        'ContinueStatement',\\n        'ReturnStatement',\\n        'ThrowStatement',\\n        'YieldExpression',\\n        'AwaitExpression' ],\\n     isTerminatorless: [Function],\\n     assertTerminatorless: [Function],\\n     COMPLETIONSTATEMENT_TYPES: \\n      [ 'BreakStatement',\\n        'ContinueStatement',\\n        'ReturnStatement',\\n        'ThrowStatement' ],\\n     isCompletionStatement: [Function],\\n     assertCompletionStatement: [Function],\\n     CONDITIONAL_TYPES: [ 'ConditionalExpression', 'IfStatement' ],\\n     isConditional: [Function],\\n     assertConditional: [Function],\\n     LOOP_TYPES: \\n      [ 'DoWhileStatement',\\n        'ForInStatement',\\n        'ForStatement',\\n        'WhileStatement',\\n        'ForOfStatement',\\n        'ForAwaitStatement' ],\\n     isLoop: [Function],\\n     assertLoop: [Function],\\n     WHILE_TYPES: [ 'DoWhileStatement', 'WhileStatement' ],\\n     isWhile: [Function],\\n     assertWhile: [Function],\\n     EXPRESSIONWRAPPER_TYPES: \\n      [ 'ExpressionStatement',\\n        'TypeCastExpression',\\n        'ParenthesizedExpression' ],\\n     isExpressionWrapper: [Function],\\n     assertExpressionWrapper: [Function],\\n     FOR_TYPES: \\n      [ 'ForInStatement',\\n        'ForStatement',\\n        'ForOfStatement',\\n        'ForAwaitStatement' ],\\n     isFor: [Function],\\n     assertFor: [Function],\\n     FORXSTATEMENT_TYPES: [ 'ForInStatement', 'ForOfStatement', 'ForAwaitStatement' ],\\n     isForXStatement: [Function],\\n     assertForXStatement: [Function],\\n     FUNCTION_TYPES: \\n      [ 'FunctionDeclaration',\\n        'FunctionExpression',\\n        'ObjectMethod',\\n        'ArrowFunctionExpression',\\n        'ClassMethod' ],\\n     isFunction: [Function],\\n     assertFunction: [Function],\\n     FUNCTIONPARENT_TYPES: \\n      [ 'FunctionDeclaration',\\n        'FunctionExpression',\\n        'Program',\\n        'ObjectMethod',\\n        'ArrowFunctionExpression',\\n        'ClassMethod' ],\\n     isFunctionParent: [Function],\\n     assertFunctionParent: [Function],\\n     PUREISH_TYPES: \\n      [ 'FunctionDeclaration',\\n        'FunctionExpression',\\n        'StringLiteral',\\n        'NumericLiteral',\\n        'NullLiteral',\\n        'BooleanLiteral',\\n        'ArrowFunctionExpression',\\n        'ClassDeclaration',\\n        'ClassExpression' ],\\n     isPureish: [Function],\\n     assertPureish: [Function],\\n     DECLARATION_TYPES: \\n      [ 'FunctionDeclaration',\\n        'VariableDeclaration',\\n        'ClassDeclaration',\\n        'ExportAllDeclaration',\\n        'ExportDefaultDeclaration',\\n        'ExportNamedDeclaration',\\n        'ImportDeclaration',\\n        'DeclareClass',\\n        'DeclareFunction',\\n        'DeclareInterface',\\n        'DeclareModule',\\n        'DeclareModuleExports',\\n        'DeclareTypeAlias',\\n        'DeclareOpaqueType',\\n        'DeclareVariable',\\n        'DeclareExportDeclaration',\\n        'InterfaceDeclaration',\\n        'TypeAlias',\\n        'OpaqueType' ],\\n     isDeclaration: [Function],\\n     assertDeclaration: [Function],\\n     LVAL_TYPES: \\n      [ 'Identifier',\\n        'MemberExpression',\\n        'RestElement',\\n        'AssignmentPattern',\\n        'ArrayPattern',\\n        'ObjectPattern' ],\\n     isLVal: [Function],\\n     assertLVal: [Function],\\n     LITERAL_TYPES: \\n      [ 'StringLiteral',\\n        'NumericLiteral',\\n        'NullLiteral',\\n        'BooleanLiteral',\\n        'RegExpLiteral',\\n        'TemplateLiteral' ],\\n     isLiteral: [Function],\\n     assertLiteral: [Function],\\n     IMMUTABLE_TYPES: \\n      [ 'StringLiteral',\\n        'NumericLiteral',\\n        'NullLiteral',\\n        'BooleanLiteral',\\n        'JSXAttribute',\\n        'JSXClosingElement',\\n        'JSXElement',\\n        'JSXExpressionContainer',\\n        'JSXSpreadChild',\\n        'JSXOpeningElement',\\n        'JSXText' ],\\n     assertImmutable: [Function],\\n     USERWHITESPACABLE_TYPES: \\n      [ 'ObjectMethod',\\n        'ObjectProperty',\\n        'ObjectTypeCallProperty',\\n        'ObjectTypeIndexer',\\n        'ObjectTypeProperty',\\n        'ObjectTypeSpreadProperty' ],\\n     isUserWhitespacable: [Function],\\n     assertUserWhitespacable: [Function],\\n     METHOD_TYPES: [ 'ObjectMethod', 'ClassMethod' ],\\n     isMethod: [Function],\\n     assertMethod: [Function],\\n     OBJECTMEMBER_TYPES: [ 'ObjectMethod', 'ObjectProperty' ],\\n     isObjectMember: [Function],\\n     assertObjectMember: [Function],\\n     PROPERTY_TYPES: [ 'ObjectProperty', 'ClassProperty' ],\\n     isProperty: [Function],\\n     assertProperty: [Function],\\n     UNARYLIKE_TYPES: \\n      [ 'UnaryExpression',\\n        'SpreadElement',\\n        'RestProperty',\\n        'SpreadProperty' ],\\n     isUnaryLike: [Function],\\n     assertUnaryLike: [Function],\\n     PATTERN_TYPES: [ 'AssignmentPattern', 'ArrayPattern', 'ObjectPattern' ],\\n     isPattern: [Function],\\n     assertPattern: [Function],\\n     CLASS_TYPES: [ 'ClassDeclaration', 'ClassExpression' ],\\n     isClass: [Function],\\n     assertClass: [Function],\\n     MODULEDECLARATION_TYPES: \\n      [ 'ExportAllDeclaration',\\n        'ExportDefaultDeclaration',\\n        'ExportNamedDeclaration',\\n        'ImportDeclaration' ],\\n     isModuleDeclaration: [Function],\\n     assertModuleDeclaration: [Function],\\n     EXPORTDECLARATION_TYPES: \\n      [ 'ExportAllDeclaration',\\n        'ExportDefaultDeclaration',\\n        'ExportNamedDeclaration' ],\\n     isExportDeclaration: [Function],\\n     assertExportDeclaration: [Function],\\n     MODULESPECIFIER_TYPES: \\n      [ 'ExportSpecifier',\\n        'ImportDefaultSpecifier',\\n        'ImportNamespaceSpecifier',\\n        'ImportSpecifier',\\n        'ExportDefaultSpecifier',\\n        'ExportNamespaceSpecifier' ],\\n     isModuleSpecifier: [Function],\\n     assertModuleSpecifier: [Function],\\n     FLOW_TYPES: \\n      [ 'AnyTypeAnnotation',\\n        'ArrayTypeAnnotation',\\n        'BooleanTypeAnnotation',\\n        'BooleanLiteralTypeAnnotation',\\n        'NullLiteralTypeAnnotation',\\n        'ClassImplements',\\n        'DeclareClass',\\n        'DeclareFunction',\\n        'DeclareInterface',\\n        'DeclareModule',\\n        'DeclareModuleExports',\\n        'DeclareTypeAlias',\\n        'DeclareOpaqueType',\\n        'DeclareVariable',\\n        'DeclareExportDeclaration',\\n        'ExistentialTypeParam',\\n        'FunctionTypeAnnotation',\\n        'FunctionTypeParam',\\n        'GenericTypeAnnotation',\\n        'InterfaceExtends',\\n        'InterfaceDeclaration',\\n        'IntersectionTypeAnnotation',\\n        'MixedTypeAnnotation',\\n        'EmptyTypeAnnotation',\\n        'NullableTypeAnnotation',\\n        'NumericLiteralTypeAnnotation',\\n        'NumberTypeAnnotation',\\n        'StringLiteralTypeAnnotation',\\n        'StringTypeAnnotation',\\n        'ThisTypeAnnotation',\\n        'TupleTypeAnnotation',\\n        'TypeofTypeAnnotation',\\n        'TypeAlias',\\n        'OpaqueType',\\n        'TypeAnnotation',\\n        'TypeCastExpression',\\n        'TypeParameter',\\n        'TypeParameterDeclaration',\\n        'TypeParameterInstantiation',\\n        'ObjectTypeAnnotation',\\n        'ObjectTypeCallProperty',\\n        'ObjectTypeIndexer',\\n        'ObjectTypeProperty',\\n        'ObjectTypeSpreadProperty',\\n        'QualifiedTypeIdentifier',\\n        'UnionTypeAnnotation',\\n        'VoidTypeAnnotation' ],\\n     isFlow: [Function],\\n     assertFlow: [Function],\\n     FLOWBASEANNOTATION_TYPES: \\n      [ 'AnyTypeAnnotation',\\n        'BooleanTypeAnnotation',\\n        'NullLiteralTypeAnnotation',\\n        'MixedTypeAnnotation',\\n        'EmptyTypeAnnotation',\\n        'NumberTypeAnnotation',\\n        'StringTypeAnnotation',\\n        'ThisTypeAnnotation',\\n        'VoidTypeAnnotation' ],\\n     isFlowBaseAnnotation: [Function],\\n     assertFlowBaseAnnotation: [Function],\\n     FLOWDECLARATION_TYPES: \\n      [ 'DeclareClass',\\n        'DeclareFunction',\\n        'DeclareInterface',\\n        'DeclareModule',\\n        'DeclareModuleExports',\\n        'DeclareTypeAlias',\\n        'DeclareOpaqueType',\\n        'DeclareVariable',\\n        'DeclareExportDeclaration',\\n        'InterfaceDeclaration',\\n        'TypeAlias',\\n        'OpaqueType' ],\\n     isFlowDeclaration: [Function],\\n     assertFlowDeclaration: [Function],\\n     JSX_TYPES: \\n      [ 'JSXAttribute',\\n        'JSXClosingElement',\\n        'JSXElement',\\n        'JSXEmptyExpression',\\n        'JSXExpressionContainer',\\n        'JSXSpreadChild',\\n        'JSXIdentifier',\\n        'JSXMemberExpression',\\n        'JSXNamespacedName',\\n        'JSXOpeningElement',\\n        'JSXSpreadAttribute',\\n        'JSXText' ],\\n     isJSX: [Function],\\n     assertJSX: [Function],\\n     ArrayExpression: [Function: builder],\\n     arrayExpression: [Function: builder],\\n     AssignmentExpression: [Function: builder],\\n     assignmentExpression: [Function: builder],\\n     BinaryExpression: [Function: builder],\\n     binaryExpression: [Function: builder],\\n     Directive: [Function: builder],\\n     directive: [Function: builder],\\n     DirectiveLiteral: [Function: builder],\\n     directiveLiteral: [Function: builder],\\n     BlockStatement: [Function: builder],\\n     blockStatement: [Function: builder],\\n     BreakStatement: [Function: builder],\\n     breakStatement: [Function: builder],\\n     CallExpression: [Function: builder],\\n     callExpression: [Function: builder],\\n     CatchClause: [Function: builder],\\n     catchClause: [Function: builder],\\n     ConditionalExpression: [Function: builder],\\n     conditionalExpression: [Function: builder],\\n     ContinueStatement: [Function: builder],\\n     continueStatement: [Function: builder],\\n     DebuggerStatement: [Function: builder],\\n     debuggerStatement: [Function: builder],\\n     DoWhileStatement: [Function: builder],\\n     doWhileStatement: [Function: builder],\\n     EmptyStatement: [Function: builder],\\n     emptyStatement: [Function: builder],\\n     ExpressionStatement: [Function: builder],\\n     expressionStatement: [Function: builder],\\n     File: [Function: builder],\\n     file: [Function: builder],\\n     ForInStatement: [Function: builder],\\n     forInStatement: [Function: builder],\\n     ForStatement: [Function: builder],\\n     forStatement: [Function: builder],\\n     FunctionDeclaration: [Function: builder],\\n     functionDeclaration: [Function: builder],\\n     FunctionExpression: [Function: builder],\\n     functionExpression: [Function: builder],\\n     Identifier: [Function: builder],\\n     identifier: [Function: builder],\\n     IfStatement: [Function: builder],\\n     ifStatement: [Function: builder],\\n     LabeledStatement: [Function: builder],\\n     labeledStatement: [Function: builder],\\n     StringLiteral: [Function: builder],\\n     stringLiteral: [Function: builder],\\n     NumericLiteral: [Function: builder],\\n     numericLiteral: [Function: builder],\\n     NullLiteral: [Function: builder],\\n     nullLiteral: [Function: builder],\\n     BooleanLiteral: [Function: builder],\\n     booleanLiteral: [Function: builder],\\n     RegExpLiteral: [Function: builder],\\n     regExpLiteral: [Function: builder],\\n     LogicalExpression: [Function: builder],\\n     logicalExpression: [Function: builder],\\n     MemberExpression: [Function: builder],\\n     memberExpression: [Function: builder],\\n     NewExpression: [Function: builder],\\n     newExpression: [Function: builder],\\n     Program: [Function: builder],\\n     program: [Function: builder],\\n     ObjectExpression: [Function: builder],\\n     objectExpression: [Function: builder],\\n     ObjectMethod: [Function: builder],\\n     objectMethod: [Function: builder],\\n     ObjectProperty: [Function: builder],\\n     objectProperty: [Function: builder],\\n     RestElement: [Function: builder],\\n     restElement: [Function: builder],\\n     ReturnStatement: [Function: builder],\\n     returnStatement: [Function: builder],\\n     SequenceExpression: [Function: builder],\\n     sequenceExpression: [Function: builder],\\n     SwitchCase: [Function: builder],\\n     switchCase: [Function: builder],\\n     SwitchStatement: [Function: builder],\\n     switchStatement: [Function: builder],\\n     ThisExpression: [Function: builder],\\n     thisExpression: [Function: builder],\\n     ThrowStatement: [Function: builder],\\n     throwStatement: [Function: builder],\\n     TryStatement: [Function: builder],\\n     tryStatement: [Function: builder],\\n     UnaryExpression: [Function: builder],\\n     unaryExpression: [Function: builder],\\n     UpdateExpression: [Function: builder],\\n     updateExpression: [Function: builder],\\n     VariableDeclaration: [Function: builder],\\n     variableDeclaration: [Function: builder],\\n     VariableDeclarator: [Function: builder],\\n     variableDeclarator: [Function: builder],\\n     WhileStatement: [Function: builder],\\n     whileStatement: [Function: builder],\\n     WithStatement: [Function: builder],\\n     withStatement: [Function: builder],\\n     AssignmentPattern: [Function: builder],\\n     assignmentPattern: [Function: builder],\\n     ArrayPattern: [Function: builder],\\n     arrayPattern: [Function: builder],\\n     ArrowFunctionExpression: [Function: builder],\\n     arrowFunctionExpression: [Function: builder],\\n     ClassBody: [Function: builder],\\n     classBody: [Function: builder],\\n     ClassDeclaration: [Function: builder],\\n     classDeclaration: [Function: builder],\\n     ClassExpression: [Function: builder],\\n     classExpression: [Function: builder],\\n     ExportAllDeclaration: [Function: builder],\\n     exportAllDeclaration: [Function: builder],\\n     ExportDefaultDeclaration: [Function: builder],\\n     exportDefaultDeclaration: [Function: builder],\\n     ExportNamedDeclaration: [Function: builder],\\n     exportNamedDeclaration: [Function: builder],\\n     ExportSpecifier: [Function: builder],\\n     exportSpecifier: [Function: builder],\\n     ForOfStatement: [Function: builder],\\n     forOfStatement: [Function: builder],\\n     ImportDeclaration: [Function: builder],\\n     importDeclaration: [Function: builder],\\n     ImportDefaultSpecifier: [Function: builder],\\n     importDefaultSpecifier: [Function: builder],\\n     ImportNamespaceSpecifier: [Function: builder],\\n     importNamespaceSpecifier: [Function: builder],\\n     ImportSpecifier: [Function: builder],\\n     importSpecifier: [Function: builder],\\n     MetaProperty: [Function: builder],\\n     metaProperty: [Function: builder],\\n     ClassMethod: [Function: builder],\\n     classMethod: [Function: builder],\\n     ObjectPattern: [Function: builder],\\n     objectPattern: [Function: builder],\\n     SpreadElement: [Function: builder],\\n     spreadElement: [Function: builder],\\n     Super: [Function: builder],\\n     super: [Function: builder],\\n     TaggedTemplateExpression: [Function: builder],\\n     taggedTemplateExpression: [Function: builder],\\n     TemplateElement: [Function: builder],\\n     templateElement: [Function: builder],\\n     TemplateLiteral: [Function: builder],\\n     templateLiteral: [Function: builder],\\n     YieldExpression: [Function: builder],\\n     yieldExpression: [Function: builder],\\n     AnyTypeAnnotation: [Function: builder],\\n     anyTypeAnnotation: [Function: builder],\\n     ArrayTypeAnnotation: [Function: builder],\\n     arrayTypeAnnotation: [Function: builder],\\n     BooleanTypeAnnotation: [Function: builder],\\n     booleanTypeAnnotation: [Function: builder],\\n     BooleanLiteralTypeAnnotation: [Function: builder],\\n     booleanLiteralTypeAnnotation: [Function: builder],\\n     NullLiteralTypeAnnotation: [Function: builder],\\n     nullLiteralTypeAnnotation: [Function: builder],\\n     ClassImplements: [Function: builder],\\n     classImplements: [Function: builder],\\n     ClassProperty: [Function: builder],\\n     classProperty: [Function: builder],\\n     DeclareClass: [Function: builder],\\n     declareClass: [Function: builder],\\n     DeclareFunction: [Function: builder],\\n     declareFunction: [Function: builder],\\n     DeclareInterface: [Function: builder],\\n     declareInterface: [Function: builder],\\n     DeclareModule: [Function: builder],\\n     declareModule: [Function: builder],\\n     DeclareModuleExports: [Function: builder],\\n     declareModuleExports: [Function: builder],\\n     DeclareTypeAlias: [Function: builder],\\n     declareTypeAlias: [Function: builder],\\n     DeclareOpaqueType: [Function: builder],\\n     declareOpaqueType: [Function: builder],\\n     DeclareVariable: [Function: builder],\\n     declareVariable: [Function: builder],\\n     DeclareExportDeclaration: [Function: builder],\\n     declareExportDeclaration: [Function: builder],\\n     ExistentialTypeParam: [Function: builder],\\n     existentialTypeParam: [Function: builder],\\n     FunctionTypeAnnotation: [Function: builder],\\n     functionTypeAnnotation: [Function: builder],\\n     FunctionTypeParam: [Function: builder],\\n     functionTypeParam: [Function: builder],\\n     GenericTypeAnnotation: [Function: builder],\\n     genericTypeAnnotation: [Function: builder],\\n     InterfaceExtends: [Function: builder],\\n     interfaceExtends: [Function: builder],\\n     InterfaceDeclaration: [Function: builder],\\n     interfaceDeclaration: [Function: builder],\\n     IntersectionTypeAnnotation: [Function: builder],\\n     intersectionTypeAnnotation: [Function: builder],\\n     MixedTypeAnnotation: [Function: builder],\\n     mixedTypeAnnotation: [Function: builder],\\n     EmptyTypeAnnotation: [Function: builder],\\n     emptyTypeAnnotation: [Function: builder],\\n     NullableTypeAnnotation: [Function: builder],\\n     nullableTypeAnnotation: [Function: builder],\\n     NumericLiteralTypeAnnotation: [Function: builder],\\n     numericLiteralTypeAnnotation: [Function: builder],\\n     NumberTypeAnnotation: [Function: builder],\\n     numberTypeAnnotation: [Function: builder],\\n     StringLiteralTypeAnnotation: [Function: builder],\\n     stringLiteralTypeAnnotation: [Function: builder],\\n     StringTypeAnnotation: [Function: builder],\\n     stringTypeAnnotation: [Function: builder],\\n     ThisTypeAnnotation: [Function: builder],\\n     thisTypeAnnotation: [Function: builder],\\n     TupleTypeAnnotation: [Function: builder],\\n     tupleTypeAnnotation: [Function: builder],\\n     TypeofTypeAnnotation: [Function: builder],\\n     typeofTypeAnnotation: [Function: builder],\\n     TypeAlias: [Function: builder],\\n     typeAlias: [Function: builder],\\n     OpaqueType: [Function: builder],\\n     opaqueType: [Function: builder],\\n     TypeAnnotation: [Function: builder],\\n     typeAnnotation: [Function: builder],\\n     TypeCastExpression: [Function: builder],\\n     typeCastExpression: [Function: builder],\\n     TypeParameter: [Function: builder],\\n     typeParameter: [Function: builder],\\n     TypeParameterDeclaration: [Function: builder],\\n     typeParameterDeclaration: [Function: builder],\\n     TypeParameterInstantiation: [Function: builder],\\n     typeParameterInstantiation: [Function: builder],\\n     ObjectTypeAnnotation: [Function: builder],\\n     objectTypeAnnotation: [Function: builder],\\n     ObjectTypeCallProperty: [Function: builder],\\n     objectTypeCallProperty: [Function: builder],\\n     ObjectTypeIndexer: [Function: builder],\\n     objectTypeIndexer: [Function: builder],\\n     ObjectTypeProperty: [Function: builder],\\n     objectTypeProperty: [Function: builder],\\n     ObjectTypeSpreadProperty: [Function: builder],\\n     objectTypeSpreadProperty: [Function: builder],\\n     QualifiedTypeIdentifier: [Function: builder],\\n     qualifiedTypeIdentifier: [Function: builder],\\n     UnionTypeAnnotation: [Function: builder],\\n     unionTypeAnnotation: [Function: builder],\\n     VoidTypeAnnotation: [Function: builder],\\n     voidTypeAnnotation: [Function: builder],\\n     JSXAttribute: [Function: builder],\\n     jSXAttribute: [Function: builder],\\n     JSXClosingElement: [Function: builder],\\n     jSXClosingElement: [Function: builder],\\n     JSXElement: [Function: builder],\\n     jSXElement: [Function: builder],\\n     JSXEmptyExpression: [Function: builder],\\n     jSXEmptyExpression: [Function: builder],\\n     JSXExpressionContainer: [Function: builder],\\n     jSXExpressionContainer: [Function: builder],\\n     JSXSpreadChild: [Function: builder],\\n     jSXSpreadChild: [Function: builder],\\n     JSXIdentifier: [Function: builder],\\n     jSXIdentifier: [Function: builder],\\n     JSXMemberExpression: [Function: builder],\\n     jSXMemberExpression: [Function: builder],\\n     JSXNamespacedName: [Function: builder],\\n     jSXNamespacedName: [Function: builder],\\n     JSXOpeningElement: [Function: builder],\\n     jSXOpeningElement: [Function: builder],\\n     JSXSpreadAttribute: [Function: builder],\\n     jSXSpreadAttribute: [Function: builder],\\n     JSXText: [Function: builder],\\n     jSXText: [Function: builder],\\n     Noop: [Function: builder],\\n     noop: [Function: builder],\\n     ParenthesizedExpression: [Function: builder],\\n     parenthesizedExpression: [Function: builder],\\n     AwaitExpression: [Function: builder],\\n     awaitExpression: [Function: builder],\\n     ForAwaitStatement: [Function: builder],\\n     forAwaitStatement: [Function: builder],\\n     BindExpression: [Function: builder],\\n     bindExpression: [Function: builder],\\n     Import: [Function: builder],\\n     import: [Function: builder],\\n     Decorator: [Function: builder],\\n     decorator: [Function: builder],\\n     DoExpression: [Function: builder],\\n     doExpression: [Function: builder],\\n     ExportDefaultSpecifier: [Function: builder],\\n     exportDefaultSpecifier: [Function: builder],\\n     ExportNamespaceSpecifier: [Function: builder],\\n     exportNamespaceSpecifier: [Function: builder],\\n     RestProperty: [Function: builder],\\n     restProperty: [Function: builder],\\n     SpreadProperty: [Function: builder],\\n     spreadProperty: [Function: builder],\\n     numberLiteral: [Function],\\n     NumberLiteral: [Function],\\n     isNumberLiteral: [Function],\\n     assertNumberLiteral: [Function],\\n     regexLiteral: [Function],\\n     RegexLiteral: [Function],\\n     isRegexLiteral: [Function],\\n     assertRegexLiteral: [Function] },\\n  traverse: \\n   { [Function: traverse]\\n     visitors: \\n      { __esModule: true,\\n        explode: [Function: explode],\\n        verify: [Function: verify],\\n        merge: [Function: merge] },\\n     verify: [Function: verify],\\n     explode: [Function: explode],\\n     NodePath: { [Function: NodePath] get: [Function: get] },\\n     Scope: { [Function: Scope] globals: [Array], contextVariables: [Array] },\\n     Hub: [Function: Hub],\\n     cheap: [Function],\\n     node: [Function],\\n     clearNode: [Function],\\n     removeProperties: [Function],\\n     hasType: [Function],\\n     clearCache: \\n      { [Function]\\n        clearPath: [Function: clearPath],\\n        clearScope: [Function: clearScope] },\\n     copyCache: [Function] },\\n  OptionManager: \\n   { [Function: OptionManager]\\n     memoisePluginContainer: [Function: memoisePluginContainer],\\n     createBareOptions: [Function: createBareOptions],\\n     normalisePlugin: [Function: normalisePlugin],\\n     normalisePlugins: [Function: normalisePlugins],\\n     memoisedPlugins: [] },\\n  Pipeline: [Function: Pipeline],\\n  analyse: [Function: bound analyse],\\n  transform: [Function: bound transform],\\n  transformFromAst: [Function: bound transformFromAst],\\n  Plugin: [Function: Plugin],\\n  transformFile: [Function: transformFile],\\n  transformFileSync: [Function: transformFileSync] } (While processing preset: \\\"/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/env/index.js\\\")\\n    at assertPath (path.js:28:11)\\n    at Object.join (path.js:1236:7)\\n    at new Env (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/env/lib/env.js:24:23)\\n    at createEnv (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/env/lib/env.js:104:10)\\n    at /home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-core/lib/transformation/file/options/option-manager.js:317:46\\n    at Array.map (<anonymous>)\\n    at OptionManager.resolvePresets (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-core/lib/transformation/file/options/option-manager.js:275:20)\\n    at OptionManager.mergePresets (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-core/lib/transformation/file/options/option-manager.js:264:10)\\n    at OptionManager.mergeOptions (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-core/lib/transformation/file/options/option-manager.js:249:14)\\n    at OptionManager.init (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-core/lib/transformation/file/options/option-manager.js:368:12)\\n    at File.initOptions (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-core/lib/transformation/file/index.js:212:65)\\n    at new File (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-core/lib/transformation/file/index.js:135:24)\\n    at Pipeline.transform (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-core/lib/transformation/pipeline.js:46:16)\\n    at transpile (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-loader/lib/index.js:50:20)\\n    at Object.module.exports (/home/derek/Dropbox/domcrawler/DomCrawler/node_modules/babel-loader/lib/index.js:173:20)\");\n\n//# sourceURL=webpack:///./DomCrawler.js?");

/***/ })

/******/ });